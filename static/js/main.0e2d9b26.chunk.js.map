{"version":3,"sources":["Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","particles_default","params","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","canvasClassName","pages","_ref","style","web","div","Object","objectSpread","background","src_Home_0","_ref2","_ref3","App","_useState","useState","_useState2","slicedToArray","index","setIndex","_useState3","_useState4","lastIndex","setLastIndex","changePage","nextPageIndex","length","transitions","useTransition","p","from","transform","concat","enter","leave","handleKeyPress","props","key","useEffect","window","addEventListener","removeEventListener","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","delta","assign","onClick","map","_ref4","item","Page","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e2d9b26.chunk.js","sourcesContent":["import React from 'react'\nimport Particles from 'react-particles-js'\n\nimport './Home.css'\n\nconst Home = () => (\n    <div className=\"container\">\n        <Particles\n            params={{\n                particles: {\n                    number: {\n                        value: 260,\n                        density: {\n                            enable: false\n                        }\n                    },\n                    size: {\n                        value: 3,\n                        random: true,\n                        anim: {\n                            speed: 4,\n                            size_min: 0.3\n                        }\n                    },\n                    line_linked: {\n                        enable: false\n                    },\n                    move: {\n                        random: true,\n                        speed: 1,\n                        direction: 'top',\n                        out_mode: 'out'\n                    }\n                },\n                interactivity: {\n                    events: {\n                        onhover: {\n                            enable: true,\n                            mode: 'bubble'\n                        },\n                        onclick: {\n                            enable: true,\n                            mode: 'repulse'\n                        }\n                    },\n                    modes: {\n                        bubble: {\n                            distance: 250,\n                            duration: 2,\n                            size: 0,\n                            opacity: 0\n                        },\n                        repulse: {\n                            distance: 400,\n                            duration: 4\n                        }\n                    }\n                    // retina_detect: true\n                }\n            }}\n            canvasClassName=\"particles\"\n        />\n        <div className=\"name\">{'<Taskim />'}</div>\n        <div className=\"rname\">Tony Miksa</div>\n        <div className=\"subtitle\">\n            Développeur passionné et perfectionniste, qui aime les choses bien\n            faites\n        </div>\n    </div>\n)\n\nexport default Home\n","import React, { useState, useEffect } from 'react'\nimport { useTransition, animated } from 'react-spring'\nimport { useSwipeable } from 'react-swipeable'\n\nimport Home from './Home'\nimport './App.css'\n\nconst pages = [\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{\n                ...style,\n                background:\n                    'linear-gradient(123deg, rgba(255,189,91,1) 0%, rgba(255,137,184,1) 100%)'\n            }}>\n            <Home />\n        </animated.div>\n    ),\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{\n                ...style,\n                background:\n                    'linear-gradient(42deg, rgba(168,255,196,1) 0%, rgba(107,198,255,1) 100%)'\n            }}>\n            B\n        </animated.div>\n    ),\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{ ...style, background: 'lightgreen' }}>\n            C\n        </animated.div>\n    )\n]\n\nfunction App() {\n    const [index, setIndex] = useState(0)\n\n    const [lastIndex, setLastIndex] = useState(0)\n\n    const changePage = nextPageIndex => {\n        if (nextPageIndex < 0 || nextPageIndex >= pages.length) return\n        setLastIndex(() => index)\n        setIndex(() => nextPageIndex)\n    }\n\n    const transitions = useTransition(index, p => p, {\n        from: {\n            opacity: 0,\n            transform: `translate3d(${\n                lastIndex < index ? '100%' : '-100%'\n            },0,0)`\n        },\n        enter: { opacity: 1, transform: `translate3d(0%,0,0)` },\n        leave: {\n            opacity: 0,\n            transform: `translate3d(${lastIndex < index ? '-50%' : '50%'} ,0,0)`\n        }\n    })\n\n    const handleKeyPress = props => {\n        if (props.key === 'ArrowRight') {\n            changePage(index + 1)\n        } else if (props.key === 'ArrowLeft') {\n            changePage(index - 1)\n        }\n    }\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyPress)\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress)\n        }\n    })\n\n    const swipeHandlers = useSwipeable({\n        onSwipedLeft: () => changePage(index + 1),\n        onSwipedRight: () => changePage(index - 1),\n        delta: 5\n    })\n\n    return (\n        <div className=\"simple-trans-main\" {...swipeHandlers}>\n            <div className=\"controls\">\n                <button\n                    className=\"button type1\"\n                    onClick={() => changePage(index - 1)}>\n                    ←\n                </button>\n                <button\n                    className=\"button type1\"\n                    onClick={() => changePage(index + 1)}>\n                    →\n                </button>\n            </div>\n            {transitions.map(({ item, props, key }) => {\n                const Page = pages[item]\n                return <Page key={key} style={props} />\n            })}\n        </div>\n    )\n}\n\nexport default App\n\n// Attentif aux détails, j'aime les choses bien faites\n// Développeur passionné et perfectionniste, j'aime les choses bien faites\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}