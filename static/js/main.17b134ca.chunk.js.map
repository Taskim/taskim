{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pages","_ref","style","react_default","a","createElement","web","div","className","Object","objectSpread","background","_ref2","_ref3","App","_useState","useState","_useState2","slicedToArray","index","setIndex","_useState3","_useState4","lastIndex","setLastIndex","console","log","changePage","nextPageIndex","length","transitions","useTransition","p","from","opacity","transform","concat","enter","leave","handleKeyPress","props","key","useEffect","window","addEventListener","removeEventListener","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","assign","onClick","map","_ref4","item","Page","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAMMA,SAAQ,CACV,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAV,CACIC,UAAU,OACVN,MAAKO,OAAAC,EAAA,EAAAD,CAAA,GACEP,EADF,CAEDS,WACI,8EALZ,OAUJ,SAAAC,GAAA,IAAGV,EAAHU,EAAGV,MAAH,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAV,CACIC,UAAU,OACVN,MAAKO,OAAAC,EAAA,EAAAD,CAAA,GAAOP,EAAP,CAAcS,WAAY,eAFnC,MAMJ,SAAAE,GAAA,IAAGX,EAAHW,EAAGX,MAAH,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAV,CACIC,UAAU,OACVN,MAAKO,OAAAC,EAAA,EAAAD,CAAA,GAAOP,EAAP,CAAcS,WAAY,gBAFnC,QA0EOG,MAlEf,WAAe,IAAAC,EACeC,mBAAS,GADxBC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GACJI,EADIF,EAAA,GACGG,EADHH,EAAA,GAAAI,EAGuBL,mBAAS,GAHhCM,EAAAb,OAAAS,EAAA,EAAAT,CAAAY,EAAA,GAGJE,EAHID,EAAA,GAGOE,EAHPF,EAAA,GAKXG,QAAQC,IAAI,IAAKP,EAAO,QAASI,GAEjC,IAAMI,EAAa,SAAAC,GACfH,QAAQC,IAAI,OAAQE,GAChBA,EAAgB,GAAKA,GAAiB5B,EAAM6B,SAChDL,EAAa,kBAAML,IACnBC,EAAS,kBAAMQ,IACfH,QAAQC,IAAI,WAGVI,EAAcC,YAAcZ,EAAO,SAAAa,GAAC,OAAIA,GAAG,CAC7CC,KAAM,CACFC,QAAS,EACTC,UAAS,eAAAC,OACLb,EAAYJ,EAAQ,OAAS,QADxB,UAIbkB,MAAO,CAAEH,QAAS,EAAGC,UAAS,uBAC9BG,MAAO,CACHJ,QAAS,EACTC,UAAS,eAAAC,OAAiBb,EAAYJ,EAAQ,OAAS,MAA9C,aAIXoB,EAAiB,SAAAC,GACD,eAAdA,EAAMC,IACNd,EAAWR,EAAQ,GACE,cAAdqB,EAAMC,KACbd,EAAWR,EAAQ,IAG3BuB,oBAAU,WAEN,OADAC,OAAOC,iBAAiB,UAAWL,GAC5B,WACHI,OAAOE,oBAAoB,UAAWN,MAI9C,IAAMO,EAAgBC,YAAa,CAC/BC,aAAc,kBAAMrB,EAAWR,EAAQ,IACvC8B,cAAe,kBAAMtB,EAAWR,EAAQ,MAG5C,OACIhB,EAAAC,EAAAC,cAAA,MAAAI,OAAAyC,OAAA,CAAK1C,UAAU,qBAAwBsC,GACnC3C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,OAAO2C,QAAS,kBAAMxB,EAAWR,EAAQ,KAA3D,QAGAhB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,QAAQ2C,QAAS,kBAAMxB,EAAWR,EAAQ,KAA5D,UAIHW,EAAYsB,IAAI,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,KAAMd,EAAiBa,EAAjBb,MAAOC,EAAUY,EAAVZ,IACvBc,EAAOvD,EAAMsD,GACnB,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,CAAMd,IAAKA,EAAKvC,MAAOsC,QClF1BgB,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17b134ca.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useTransition, animated } from 'react-spring'\nimport { useSwipeable } from 'react-swipeable'\n\nimport './App.css'\n\nconst pages = [\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{\n                ...style,\n                background:\n                    'linear-gradient(123deg, rgba(255,189,91,1) 0%, rgba(255,137,184,1) 100%)'\n            }}>\n            YY\n        </animated.div>\n    ),\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{ ...style, background: 'lightblue' }}>\n            B\n        </animated.div>\n    ),\n    ({ style }) => (\n        <animated.div\n            className=\"page\"\n            style={{ ...style, background: 'lightgreen' }}>\n            C\n        </animated.div>\n    )\n]\n\nfunction App() {\n    const [index, setIndex] = useState(0)\n\n    const [lastIndex, setLastIndex] = useState(0)\n\n    console.log('i', index, 'lastI', lastIndex)\n\n    const changePage = nextPageIndex => {\n        console.log('yolo', nextPageIndex)\n        if (nextPageIndex < 0 || nextPageIndex >= pages.length) return\n        setLastIndex(() => index)\n        setIndex(() => nextPageIndex)\n        console.log('yolo2')\n    }\n\n    const transitions = useTransition(index, p => p, {\n        from: {\n            opacity: 0,\n            transform: `translate3d(${\n                lastIndex < index ? '100%' : '-100%'\n            },0,0)`\n        },\n        enter: { opacity: 1, transform: `translate3d(0%,0,0)` },\n        leave: {\n            opacity: 0,\n            transform: `translate3d(${lastIndex < index ? '-50%' : '50%'} ,0,0)`\n        }\n    })\n\n    const handleKeyPress = props => {\n        if (props.key === 'ArrowRight') {\n            changePage(index + 1)\n        } else if (props.key === 'ArrowLeft') {\n            changePage(index - 1)\n        }\n    }\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyPress)\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress)\n        }\n    })\n\n    const swipeHandlers = useSwipeable({\n        onSwipedLeft: () => changePage(index + 1),\n        onSwipedRight: () => changePage(index - 1)\n    })\n\n    return (\n        <div className=\"simple-trans-main\" {...swipeHandlers}>\n            <div className=\"controls\">\n                <button className=\"left\" onClick={() => changePage(index - 1)}>\n                    left\n                </button>\n                <button className=\"right\" onClick={() => changePage(index + 1)}>\n                    right\n                </button>\n            </div>\n            {transitions.map(({ item, props, key }) => {\n                const Page = pages[item]\n                return <Page key={key} style={props} />\n            })}\n        </div>\n    )\n}\n\nexport default App\n\n// Attentif aux détails, j'aime les choses bien faites\n// Développeur passionné et perfectionniste, j'aime les choses bien faites\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}