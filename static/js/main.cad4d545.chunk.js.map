{"version":3,"sources":["avatar.png","stars.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","url","name","wrap","arguments","length","undefined","concat","calc","x","y","window","innerHeight","innerWidth","trans","s","Card","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","Object","slicedToArray","props","set","parallax","useRef","console","log","react_default","a","createElement","Fragment","renderprops_addons","ref","pages","offset","speed","style","margin","zIndex","width","height","viewBox","xmlns","d","fill","backgroundColor","factor","backgroundImage","backgroundSize","display","alignItems","justifyContent","pointerEvents","src","backgroundPosition","onClick","current","scrollTo","web","div","className","onMouseMove","_ref","clientX","clientY","onMouseLeave","transform","interpolate","avatar","id","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cad4d545.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.31d2c9b8.png\";","module.exports = __webpack_public_path__ + \"static/media/stars.5546c7c6.svg\";","import React, { useRef } from 'react'\n// import ReactDOM from 'react-dom'\nimport { useSpring, animated } from 'react-spring'\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons'\nimport './App.css'\nimport './devices.css'\nimport avatar from './avatar.png'\nimport stars from './stars.svg'\nconst url = (name, wrap = false) =>\n    `${\n        wrap ? 'url(' : ''\n    }https://awv3node-homepage.surge.sh/build/assets/${name}.svg${\n        wrap ? ')' : ''\n    }`\n\nconst calc = (x, y) => [\n    -(y - window.innerHeight / 2) / 10,\n    (x - window.innerWidth / 2) / 10,\n    1.1\n]\nconst trans = (x, y, s) =>\n    `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\nfunction Card() {\n    const [props, set] = useSpring(() => ({\n        xys: [0, 0, 1],\n        config: { mass: 1, tension: 450, friction: 32 }\n    }))\n    const parallax = useRef(null)\n    console.log('props', props)\n    return (\n        <>\n            <Parallax ref={parallax} pages={3}>\n                <ParallaxLayer\n                    offset={0}\n                    speed={-0.5}\n                    style={{\n                        margin: 40,\n                        zIndex: 10,\n                        width: 'auto',\n                        height: 'auto'\n                    }}>\n                    <svg\n                        height=\"211.99986px\"\n                        viewBox=\"0 0 511.99986 511.99986\"\n                        width=\"211.99986px\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"m477.449219 256c0-21.75 39.410156-48.386719 34.050781-68.449219-5.550781-20.757812-53.15625-24.101562-63.671875-42.277343-10.667969-18.433594 10.125-61.304688-4.835937-76.265626-14.960938-14.960937-57.832032 5.828126-76.269532-4.835937-18.171875-10.515625-21.515625-58.121094-42.273437-63.671875-20.0625-5.359375-46.699219 34.050781-68.449219 34.050781s-48.386719-39.410156-68.449219-34.050781c-20.757812 5.550781-24.101562 53.15625-42.277343 63.671875-18.433594 10.667969-61.304688-10.125-76.265626 4.835937-14.960937 14.960938 5.828126 57.832032-4.835937 76.269532-10.515625 18.171875-58.121094 21.515625-63.671875 42.273437-5.359375 20.0625 34.050781 46.699219 34.050781 68.449219s-39.410156 48.386719-34.050781 68.449219c5.550781 20.757812 53.15625 24.101562 63.671875 42.277343 10.667969 18.433594-10.125 61.304688 4.835937 76.265626 14.960938 14.960937 57.832032-5.828126 76.269532 4.835937 18.171875 10.515625 21.515625 58.121094 42.273437 63.671875 20.0625 5.359375 46.699219-34.050781 68.449219-34.050781s48.386719 39.410156 68.449219 34.050781c20.757812-5.550781 24.101562-53.15625 42.277343-63.671875 18.433594-10.667969 61.304688 10.125 76.265626-4.835937 14.960937-14.960938-5.828126-57.832032 4.835937-76.269532 10.515625-18.171875 58.121094-21.515625 63.671875-42.273437 5.359375-20.0625-34.050781-46.699219-34.050781-68.449219zm0 0\"\n                            fill=\"#ffee8c\"\n                        />\n                        <path\n                            d=\"m426.957031 256c0 86.347656-64.019531 157.746094-147.191406 169.3125-7.765625 1.089844-15.695313 1.640625-23.761719 1.640625-94.417968 0-170.96875-76.539063-170.96875-170.953125 0-94.417969 76.550782-170.957031 170.96875-170.957031 8.066406 0 15.996094.554687 23.761719 1.640625 83.171875 11.566406 147.191406 82.964844 147.191406 169.316406zm0 0\"\n                            fill=\"#f28f44\"\n                        />\n                        <path\n                            d=\"m426.957031 256c0 86.347656-64.019531 157.746094-147.191406 169.3125-83.175781-11.566406-147.195313-82.964844-147.195313-169.3125 0-86.351562 64.019532-157.75 147.195313-169.316406 83.171875 11.566406 147.191406 82.964844 147.191406 169.316406zm0 0\"\n                            fill=\"#ffd073\"\n                        />\n                        <g fill=\"#cc9236\">\n                            <path d=\"m155.875 229.488281c-2.003906 0-4.011719-.765625-5.539062-2.296875-3.0625-3.0625-3.0625-8.023437 0-11.082031 17.53125-17.53125 46.054687-17.53125 63.582031 0 3.0625 3.058594 3.0625 8.019531 0 11.082031-3.058594 3.058594-8.019531 3.058594-11.082031 0-11.417969-11.421875-29.996094-11.421875-41.417969 0-1.53125 1.53125-3.535157 2.296875-5.542969 2.296875zm0 0\" />\n                            <path d=\"m356.125 229.488281c-2.007812 0-4.011719-.765625-5.542969-2.296875-11.417969-11.421875-30-11.417968-41.417969 0-3.0625 3.058594-8.023437 3.058594-11.082031 0-3.0625-3.0625-3.0625-8.023437 0-11.082031 17.527344-17.53125 46.054688-17.53125 63.585938 0 3.058593 3.058594 3.058593 8.023437 0 11.082031-1.53125 1.53125-3.539063 2.296875-5.542969 2.296875zm0 0\" />\n                            <path d=\"m256 310.582031c-17.015625 0-33.015625-6.628906-45.046875-18.660156-3.058594-3.0625-3.058594-8.023437 0-11.082031 3.0625-3.0625 8.023437-3.0625 11.082031 0 9.074219 9.070312 21.132813 14.066406 33.964844 14.066406s24.890625-4.996094 33.964844-14.066406c3.058594-3.0625 8.023437-3.0625 11.082031 0 3.058594 3.058594 3.058594 8.019531 0 11.082031-12.03125 12.03125-28.03125 18.660156-45.046875 18.660156zm0 0\" />\n                        </g>\n                    </svg>\n                </ParallaxLayer>\n                <ParallaxLayer\n                    offset={1}\n                    speed={1}\n                    style={{ backgroundColor: '#805E73', height: '150vh' }}\n                />\n                <ParallaxLayer\n                    offset={2}\n                    speed={1}\n                    style={{ backgroundColor: '#87BCDE' }}\n                />\n\n                <ParallaxLayer\n                    offset={0}\n                    speed={0}\n                    factor={3}\n                    style={{\n                        backgroundImage: url('stars', true),\n                        backgroundSize: 'cover'\n                    }}\n                />\n\n                {/*<ParallaxLayer\n                    offset={1.3}\n                    speed={-0.3}\n                    style={{ pointerEvents: 'none' }}>\n                    <img\n                        src={url('satellite4')}\n                        style={{ width: '15%', marginLeft: '70%' }}\n                    />\n                </ParallaxLayer>\n\n                <ParallaxLayer offset={1} speed={0.8} style={{ opacity: 0.1 }}>\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '55%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '10%',\n                            marginLeft: '15%'\n                        }}\n                    />\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={1.75}\n                    speed={0.5}\n                    style={{ opacity: 0.1 }}>\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '70%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '40%'\n                        }}\n                    />\n                </ParallaxLayer>\n\n                <ParallaxLayer offset={1} speed={0.2} style={{ opacity: 0.2 }}>\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '10%',\n                            marginLeft: '10%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '75%'\n                        }}\n                    />\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={1.6}\n                    speed={-0.1}\n                    style={{ opacity: 0.4 }}>\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '60%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '25%',\n                            marginLeft: '30%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '10%',\n                            marginLeft: '80%'\n                        }}\n                    />\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={2.6}\n                    speed={0.4}\n                    style={{ opacity: 0.6 }}>\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '20%',\n                            marginLeft: '5%'\n                        }}\n                    />\n                    <img\n                        src={url('cloud')}\n                        style={{\n                            display: 'block',\n                            width: '15%',\n                            marginLeft: '75%'\n                        }}\n                    />\n                    </ParallaxLayer>*/}\n\n                <ParallaxLayer\n                    offset={2.5}\n                    speed={-0.4}\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        pointerEvents: 'none'\n                    }}>\n                    <img src={url('earth')} style={{ width: '60%' }} />\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={2}\n                    speed={-0.3}\n                    style={{\n                        backgroundSize: '80%',\n                        backgroundPosition: 'center',\n                        backgroundImage: url('clients', true)\n                    }}>\n                    {/*<div class=\"device device-iphone-x\">\n  <div class=\"device-frame\">\n    <img class=\"device-content\" src=\"...\">\n  </div>\n  <div class=\"device-stripe\"></div>\n  <div class=\"device-header\"></div>\n  <div class=\"device-sensors\"></div>\n  <div class=\"device-btns\"></div>\n  <div class=\"device-power\"></div>\n                </div>*/}\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={0}\n                    speed={0.1}\n                    onClick={() => parallax.current.scrollTo(1)}\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center'\n                    }}>\n                    <animated.div\n                        className=\"card\"\n                        onMouseMove={({ clientX: x, clientY: y }) =>\n                            set({ xys: calc(x, y) })\n                        }\n                        onMouseLeave={() => set({ xys: [0, 0, 1] })}\n                        style={{ transform: props.xys.interpolate(trans) }}>\n                        <div className=\"img-container\">\n                            <img className=\"avatar\" src={avatar} />\n                        </div>\n                        <div className=\"card-text\">\n                            <div>Tony</div>\n                            <div>Front-end Developer @evaneos</div>\n                        </div>\n                    </animated.div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={1}\n                    speed={0.1}\n                    onClick={() => parallax.current.scrollTo(2)}\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center'\n                    }}>\n                    <div className=\"device device-macbook-pro\">\n                        <div className=\"device-frame\">\n                            <img />\n                            <iframe\n                                id=\"inlineFrameExample\"\n                                // title=\"Inline Frame Example\"\n                                className=\"device-content\"\n                                // width=\"300\"\n                                // height=\"200\"\n                                src=\"https://taskim.github.io/labwhat/\"\n                            />\n                        </div>\n                        <div className=\"device-stipe\" />\n                        <div className=\"device-header\" />\n                        <div className=\"device-sensors\" />\n                        <div className=\"device-btns\" />\n                        <div className=\"device-power\" />\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={2}\n                    speed={-0}\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center'\n                    }}\n                    onClick={() => parallax.current.scrollTo(0)}>\n                    <img src={url('clients-main')} style={{ width: '40%' }} />\n                </ParallaxLayer>\n            </Parallax>\n        </>\n    )\n}\n\nexport default Card\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}