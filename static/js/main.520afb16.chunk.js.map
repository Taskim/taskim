{"version":3,"sources":["avatar.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","calc","x","y","window","innerHeight","innerWidth","trans","s","concat","Card","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","Object","slicedToArray","props","set","console","log","react_default","a","createElement","Fragment","className","web","div","onMouseMove","_ref","clientX","clientY","onMouseLeave","style","transform","interpolate","src","avatar","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOCMlCC,EAAO,SAACC,EAAGC,GAAJ,MAAU,GACjBA,EAAIC,OAAOC,YAAc,GAAK,IAC/BH,EAAIE,OAAOE,WAAa,GAAK,GAC9B,MAEEC,EAAQ,SAACL,EAAGC,EAAGK,GAAP,oCAAAC,OACoBP,EADpB,iBAAAO,OACqCN,EADrC,eAAAM,OACoDD,EADpD,MAiCCE,MA9Bf,WAAgB,IAAAC,EACSC,YAAU,iBAAO,CAClCC,IAAK,CAAC,EAAG,EAAG,GACZC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,OAHnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GACLU,EADKH,EAAA,GACEI,EADFJ,EAAA,GAMZ,OADAK,QAAQC,IAAI,QAASH,GAEjBI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAACG,EAAA,EAASC,IAAV,CACIF,UAAU,OACVG,YAAa,SAAAC,GAAA,IAAY/B,EAAZ+B,EAAGC,QAAqB/B,EAAxB8B,EAAeE,QAAf,OACTb,EAAI,CAAET,IAAKZ,EAAKC,EAAGC,MAEvBiC,aAAc,kBAAMd,EAAI,CAAET,IAAK,CAAC,EAAG,EAAG,MACtCwB,MAAO,CAAEC,UAAWjB,EAAMR,IAAI0B,YAAYhC,KAC1CkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASW,IAAKC,OAEjChB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,8CAIZF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eC3BPa,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.520afb16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.31d2c9b8.png\";","import React from 'react'\n// import ReactDOM from 'react-dom'\nimport { useSpring, animated } from 'react-spring'\nimport './App.css'\nimport avatar from './avatar.png'\n\nconst calc = (x, y) => [\n    -(y - window.innerHeight / 2) / 10,\n    (x - window.innerWidth / 2) / 10,\n    1.1\n]\nconst trans = (x, y, s) =>\n    `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\nfunction Card() {\n    const [props, set] = useSpring(() => ({\n        xys: [0, 0, 1],\n        config: { mass: 1, tension: 500, friction: 12 }\n    }))\n    console.log('props', props)\n    return (\n        <>\n            <div className=\"header\">\n                <animated.div\n                    className=\"card\"\n                    onMouseMove={({ clientX: x, clientY: y }) =>\n                        set({ xys: calc(x, y) })\n                    }\n                    onMouseLeave={() => set({ xys: [0, 0, 1] })}\n                    style={{ transform: props.xys.interpolate(trans) }}>\n                    <div className=\"img-container\">\n                        <img className=\"avatar\" src={avatar} />\n                    </div>\n                    <div className=\"card-text\">\n                        <div>Tony</div>\n                        <div>Front-end Developer @evaneos</div>\n                    </div>\n                </animated.div>\n            </div>\n            <div className=\"projects\" />\n        </>\n    )\n}\n\nexport default Card\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}